{"ast":null,"code":"var ContactForm = React.createClass({\n  displayName: \"ContactForm\",\n  propTypes: {\n    value: React.PropTypes.object.isRequired,\n    onChange: React.PropTypes.func.isRequired,\n    onSubmit: React.PropTypes.func.isRequired\n  },\n  onNameChange: function onNameChange(e) {\n    this.props.onChange(Object.assign({}, this.props.value, {\n      name: e.target.value\n    }));\n  },\n  onEmailChange: function onEmailChange(e) {\n    this.props.onChange(Object.assign({}, this.props.value, {\n      email: e.target.value\n    }));\n  },\n  onDescriptionChange: function onDescriptionChange(e) {\n    this.props.onChange(Object.assign({}, this.props.value, {\n      description: e.target.value\n    }));\n  },\n  onSubmit: function onSubmit(e) {\n    e.preventDefault();\n    this.props.onSubmit();\n  },\n  render: function render() {\n    var errors = this.props.value.errors || {};\n    return React.createElement('form', {\n      onSubmit: this.onSubmit,\n      className: 'ContactForm',\n      noValidate: true\n    }, React.createElement('input', {\n      type: 'text',\n      className: errors.name && 'ContactForm-error',\n      placeholder: 'Name (required)',\n      value: this.props.value.name,\n      onChange: this.onNameChange\n    }), React.createElement('input', {\n      type: 'email',\n      className: errors.email && 'ContactForm-error',\n      placeholder: 'Email (required)',\n      value: this.props.value.email,\n      onChange: this.onEmailChange\n    }), React.createElement('textarea', {\n      placeholder: 'Description',\n      value: this.props.value.description,\n      onChange: this.onDescriptionChange\n    }), React.createElement('button', {\n      type: 'submit',\n      className: \"btn btn-info\"\n    }, \"Add Contact\"));\n  }\n});\nvar ContactItem = React.createClass({\n  displayName: \"ContactItem\",\n  propTypes: {\n    name: React.PropTypes.string.isRequired,\n    email: React.PropTypes.string.isRequired,\n    description: React.PropTypes.string\n  },\n  render: function render() {\n    return React.createElement('li', {\n      className: 'ContactItem'\n    }, React.createElement('h2', {\n      className: 'ContactItem-name'\n    }, this.props.name), React.createElement('a', {\n      className: 'ContactItem-email',\n      href: 'mailto:' + this.props.email\n    }, this.props.email), React.createElement('div', {\n      className: 'ContactItem-description'\n    }, this.props.description));\n  }\n});\nvar ContactView = React.createClass({\n  displayName: \"ContactView\",\n  propTypes: {\n    contacts: React.PropTypes.array.isRequired,\n    newContact: React.PropTypes.object.isRequired,\n    onNewContactChange: React.PropTypes.func.isRequired,\n    onNewContactSubmit: React.PropTypes.func.isRequired\n  },\n  render: function render() {\n    var contactItemElements = this.props.contacts.filter(function (contact) {\n      return contact.email;\n    }).map(function (contact) {\n      return React.createElement(ContactItem, contact);\n    });\n    return React.createElement('div', {\n      className: 'ContactView'\n    }, React.createElement('h1', {\n      className: 'ContactView-title'\n    }, \"Contacts\"), React.createElement('ul', {\n      className: 'ContactView-list'\n    }, contactItemElements), React.createElement(ContactForm, {\n      value: this.props.newContact,\n      onChange: this.props.onNewContactChange,\n      onSubmit: this.props.onNewContactSubmit\n    }));\n  }\n});\n/*\r\n * Constants\r\n */\n\nvar CONTACT_TEMPLATE = {\n  name: \"\",\n  email: \"\",\n  description: \"\",\n  errors: null\n};\n/*\r\n * Actions\r\n */\n\nfunction updateNewContact(contact) {\n  setState({\n    newContact: contact\n  });\n}\n\nfunction submitNewContact() {\n  var contact = Object.assign({}, state.newContact, {\n    key: state.contacts.length + 1,\n    errors: {}\n  });\n\n  if (!contact.name) {\n    contact.errors.name = [\"Please enter your new contact's name\"];\n  }\n\n  if (!/.+@.+\\..+/.test(contact.email)) {\n    contact.errors.email = [\"Please enter your new contact's email\"];\n  }\n\n  setState(Object.keys(contact.errors).length === 0 ? {\n    newContact: Object.assign({}, CONTACT_TEMPLATE),\n    contacts: state.contacts.slice(0).concat(contact)\n  } : {\n    newContact: contact\n  });\n}\n/*\r\n * Model\r\n */\n// The app's complete current state\n\n\nvar state = {}; // Make the given changes to the state and perform any required housekeeping\n\nfunction setState(changes) {\n  Object.assign(state, changes);\n  ReactDOM.render(React.createElement(ContactView, Object.assign({}, state, {\n    onNewContactChange: updateNewContact,\n    onNewContactSubmit: submitNewContact\n  })), document.getElementById('react-app'));\n} // Set initial data\n\n\nsetState({\n  contacts: [{\n    key: 1,\n    name: \"James K Nelson\",\n    email: \"james@jamesknelson.com\",\n    description: \"Front-end Unicorn\"\n  }, {\n    key: 2,\n    name: \"Jim\",\n    email: \"jim@example.com\"\n  }],\n  newContact: Object.assign({}, CONTACT_TEMPLATE)\n});","map":{"version":3,"sources":["C:\\cygwin64\\home\\react-portfolio-jafi\\src\\contact.js"],"names":["ContactForm","React","createClass","propTypes","value","PropTypes","object","isRequired","onChange","func","onSubmit","onNameChange","e","props","Object","assign","name","target","onEmailChange","email","onDescriptionChange","description","preventDefault","render","errors","createElement","className","noValidate","type","placeholder","ContactItem","string","href","ContactView","contacts","array","newContact","onNewContactChange","onNewContactSubmit","contactItemElements","filter","contact","map","CONTACT_TEMPLATE","updateNewContact","setState","submitNewContact","state","key","length","test","keys","slice","concat","changes","ReactDOM","document","getElementById"],"mappings":"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","sourcesContent":["var ContactForm = React.createClass({\r\n    propTypes: {\r\n      value: React.PropTypes.object.isRequired,\r\n      onChange: React.PropTypes.func.isRequired,\r\n      onSubmit: React.PropTypes.func.isRequired\r\n    },\r\n    \r\n    onNameChange: function(e) {\r\n      this.props.onChange(Object.assign({}, this.props.value, {name: e.target.value}));\r\n    },\r\n    \r\n    onEmailChange: function(e) {\r\n      this.props.onChange(Object.assign({}, this.props.value, {email: e.target.value}));\r\n    },\r\n    \r\n    onDescriptionChange: function(e) {\r\n      this.props.onChange(Object.assign({}, this.props.value, {description: e.target.value}));\r\n    },\r\n  \r\n    onSubmit: function(e) {\r\n      e.preventDefault();\r\n      this.props.onSubmit();\r\n    },\r\n  \r\n    render: function() {\r\n      var errors = this.props.value.errors || {};\r\n  \r\n      return (\r\n        React.createElement('form', {onSubmit: this.onSubmit, className: 'ContactForm', noValidate: true},\r\n          React.createElement('input', {\r\n            type: 'text',\r\n            className: errors.name && 'ContactForm-error',\r\n            placeholder: 'Name (required)',\r\n            value: this.props.value.name,\r\n            onChange: this.onNameChange,\r\n          }),\r\n          React.createElement('input', {\r\n            type: 'email',\r\n            className: errors.email && 'ContactForm-error',\r\n            placeholder: 'Email (required)',\r\n            value: this.props.value.email,\r\n            onChange: this.onEmailChange,\r\n          }),\r\n          React.createElement('textarea', {\r\n            placeholder: 'Description',\r\n            value: this.props.value.description,\r\n            onChange: this.onDescriptionChange,\r\n          }),\r\n          React.createElement('button', {type: 'submit', className: \"btn btn-info\"}, \"Add Contact\")\r\n        )\r\n      );\r\n    },\r\n  });\r\n  \r\n  \r\n  var ContactItem = React.createClass({\r\n    propTypes: {\r\n      name: React.PropTypes.string.isRequired,\r\n      email: React.PropTypes.string.isRequired,\r\n      description: React.PropTypes.string,\r\n    },\r\n  \r\n    render: function() {\r\n      return (\r\n        React.createElement('li', {className: 'ContactItem'},\r\n          React.createElement('h2', {className: 'ContactItem-name'}, this.props.name),\r\n          React.createElement('a', {className: 'ContactItem-email', href: 'mailto:'+this.props.email}, this.props.email),\r\n          React.createElement('div', {className: 'ContactItem-description'}, this.props.description)\r\n        )\r\n      );\r\n    },\r\n  });\r\n  \r\n  \r\n  var ContactView = React.createClass({\r\n    propTypes: {\r\n      contacts: React.PropTypes.array.isRequired,\r\n      newContact: React.PropTypes.object.isRequired,\r\n      onNewContactChange: React.PropTypes.func.isRequired,\r\n      onNewContactSubmit: React.PropTypes.func.isRequired,\r\n    },\r\n  \r\n    render: function() {\r\n      var contactItemElements = this.props.contacts\r\n        .filter(function(contact) { return contact.email; })\r\n        .map(function(contact) { return React.createElement(ContactItem, contact); });\r\n  \r\n      return (\r\n        React.createElement('div', {className: 'ContactView'},\r\n          React.createElement('h1', {className: 'ContactView-title'}, \"Contacts\"),\r\n          React.createElement('ul', {className: 'ContactView-list'}, contactItemElements),\r\n          React.createElement(ContactForm, {\r\n            value: this.props.newContact,\r\n            onChange: this.props.onNewContactChange,\r\n            onSubmit: this.props.onNewContactSubmit,\r\n          })\r\n        )\r\n      );\r\n    },\r\n  });\r\n  \r\n  \r\n  /*\r\n   * Constants\r\n   */\r\n  \r\n  \r\n  var CONTACT_TEMPLATE = {name: \"\", email: \"\", description: \"\", errors: null};\r\n  \r\n  \r\n  \r\n  /*\r\n   * Actions\r\n   */\r\n  \r\n  \r\n  function updateNewContact(contact) {\r\n    setState({ newContact: contact });\r\n  }\r\n  \r\n  \r\n  function submitNewContact() {\r\n    var contact = Object.assign({}, state.newContact, {key: state.contacts.length + 1, errors: {}});\r\n    \r\n    if (!contact.name) {\r\n      contact.errors.name = [\"Please enter your new contact's name\"];\r\n    }\r\n    if (!/.+@.+\\..+/.test(contact.email)) {\r\n      contact.errors.email = [\"Please enter your new contact's email\"];\r\n    }\r\n  \r\n    setState(\r\n      Object.keys(contact.errors).length === 0 ? {\r\n          newContact: Object.assign({}, CONTACT_TEMPLATE),\r\n          contacts: state.contacts.slice(0).concat(contact),\r\n        }\r\n      : { newContact: contact }\r\n    );\r\n  }\r\n  \r\n  \r\n  /*\r\n   * Model\r\n   */\r\n  \r\n  \r\n  // The app's complete current state\r\n  var state = {};\r\n  \r\n  // Make the given changes to the state and perform any required housekeeping\r\n  function setState(changes) {\r\n    Object.assign(state, changes);\r\n    \r\n    ReactDOM.render(\r\n      React.createElement(ContactView, Object.assign({}, state, {\r\n        onNewContactChange: updateNewContact,\r\n        onNewContactSubmit: submitNewContact,\r\n      })),\r\n      document.getElementById('react-app')\r\n    );\r\n  }\r\n  \r\n  // Set initial data\r\n  setState({\r\n    contacts: [\r\n      {key: 1, name: \"James K Nelson\", email: \"james@jamesknelson.com\", description: \"Front-end Unicorn\"},\r\n      {key: 2, name: \"Jim\", email: \"jim@example.com\"},\r\n    ],\r\n    newContact: Object.assign({}, CONTACT_TEMPLATE),\r\n  });\r\n  "]},"metadata":{},"sourceType":"module"}